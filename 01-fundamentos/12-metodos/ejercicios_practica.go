package main

import (
"fmt"
"time"
)

// ========================================
// Ejercicio 1: User con m√©todos b√°sicos
// ========================================

type User struct {
Name  string
Email string
Age   int
}

// TODO: Implementar m√©todo String() que retorne una representaci√≥n del usuario
// func (u User) String() string {
//     // Tu c√≥digo aqu√≠
// }

// TODO: Implementar m√©todo IsAdult() que retorne true si age >= 18
// func (u User) IsAdult() bool {
//     // Tu c√≥digo aqu√≠
// }

// TODO: Implementar m√©todo UpdateEmail() que actualice el email (usar pointer receiver)
// func (u *User) UpdateEmail(newEmail string) {
//     // Tu c√≥digo aqu√≠
// }

// ========================================
// Ejercicio 2: BankAccount con operaciones bancarias
// ========================================

type BankAccount struct {
AccountNumber string
Balance       float64
Owner         string
CreatedAt     time.Time
}

// TODO: Implementar constructor NewBankAccount
// func NewBankAccount(accountNumber, owner string, initialBalance float64) *BankAccount {
//     // Tu c√≥digo aqu√≠
// }

// TODO: Implementar m√©todo Deposit (usar pointer receiver)
// func (ba *BankAccount) Deposit(amount float64) error {
//     // Tu c√≥digo aqu√≠ - validar que amount > 0
// }

// TODO: Implementar m√©todo Withdraw (usar pointer receiver)
// func (ba *BankAccount) Withdraw(amount float64) error {
//     // Tu c√≥digo aqu√≠ - validar amount > 0 y fondos suficientes
// }

// TODO: Implementar m√©todo GetBalance (usar value receiver)
// func (ba BankAccount) GetBalance() float64 {
//     // Tu c√≥digo aqu√≠
// }

// TODO: Implementar m√©todo Transfer entre cuentas
// func (ba *BankAccount) Transfer(to *BankAccount, amount float64) error {
//     // Tu c√≥digo aqu√≠ - usar Withdraw y Deposit
// }

// ========================================
// Ejercicio 3: Calculator con Method Chaining
// ========================================

type Calculator struct {
Value float64
}

// TODO: Implementar constructor
// func NewCalculator(initial float64) *Calculator {
//     // Tu c√≥digo aqu√≠
// }

// TODO: Implementar m√©todos que retornen *Calculator para method chaining
// func (c *Calculator) Add(value float64) *Calculator {
//     // Tu c√≥digo aqu√≠
// }

// func (c *Calculator) Subtract(value float64) *Calculator {
//     // Tu c√≥digo aqu√≠
// }

// func (c *Calculator) Multiply(value float64) *Calculator {
//     // Tu c√≥digo aqu√≠
// }

// func (c *Calculator) Divide(value float64) *Calculator {
//     // Tu c√≥digo aqu√≠ - validar division por cero
// }

// TODO: Implementar m√©todo Result() que retorne el valor final
// func (c Calculator) Result() float64 {
//     // Tu c√≥digo aqu√≠
// }

func main() {
fmt.Println("üéØ Ejercicios de M√©todos en Go")
fmt.Println("==============================")

fmt.Println("\nüìù Instrucciones:")
fmt.Println("1. Descomenta los m√©todos TODO uno por uno")
fmt.Println("2. Implementa cada m√©todo siguiendo los comentarios")
fmt.Println("3. Ejecuta el programa para probar tu implementaci√≥n")
fmt.Println("4. Los tests te dir√°n si tu implementaci√≥n es correcta")

// Test User (descomenta cuando implementes los m√©todos)
/*
fmt.Println("\n=== Test User ===")
user := User{Name: "Mar√≠a", Email: "maria@test.com", Age: 20}
fmt.Println("Usuario:", user.String())
fmt.Println("Es adulto:", user.IsAdult())

user.UpdateEmail("maria.nueva@test.com")
fmt.Println("Email actualizado:", user.Email)
*/

// Test BankAccount (descomenta cuando implementes los m√©todos)
/*
fmt.Println("\n=== Test BankAccount ===")
acc1 := NewBankAccount("123", "Juan", 1000.0)
acc2 := NewBankAccount("456", "Ana", 500.0)

fmt.Printf("Balance inicial Juan: $%.2f\n", acc1.GetBalance())

acc1.Deposit(200)
fmt.Printf("Despu√©s de depositar $200: $%.2f\n", acc1.GetBalance())

err := acc1.Transfer(acc2, 150)
if err != nil {
fmt.Printf("Error: %v\n", err)
} else {
fmt.Println("‚úÖ Transferencia exitosa")
fmt.Printf("Juan: $%.2f, Ana: $%.2f\n", acc1.GetBalance(), acc2.GetBalance())
}
*/

// Test Calculator (descomenta cuando implementes los m√©todos)
/*
fmt.Println("\n=== Test Calculator ===")
calc := NewCalculator(10)
result := calc.Add(5).Multiply(2).Subtract(3).Divide(2).Result()
fmt.Printf("(10 + 5) * 2 - 3 / 2 = %.2f\n", result)
*/

fmt.Println("\n‚úÖ Comienza implementando los m√©todos marcados con TODO!")
}

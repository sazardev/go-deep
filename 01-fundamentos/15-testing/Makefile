# üß™ Makefile para Testing en Go Deep - Lecci√≥n 15
# ==================================================

.PHONY: help test test-short test-race test-cover test-stress bench clean install-deps setup

# Variables
PACKAGE := ./...
COVERAGE_OUT := reports/coverage.out
COVERAGE_HTML := reports/coverage.html

# Colores para output
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m

# Target por defecto
help: ## Mostrar ayuda
	@echo -e "$(BLUE)üß™ Go Deep - Testing Makefile$(NC)"
	@echo "=============================="
	@echo ""
	@echo "Targets disponibles:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "Ejemplos:"
	@echo "  make test          # Ejecutar todos los tests"
	@echo "  make test-race     # Tests con race detection"
	@echo "  make bench         # Solo benchmarks"
	@echo "  make coverage      # Tests + coverage HTML"

# =============================================================================
# SETUP Y DEPENDENCIAS
# =============================================================================

setup: ## Configurar entorno de testing
	@echo -e "$(BLUE)üì¶ Configurando entorno...$(NC)"
	@mkdir -p reports
	@go mod tidy
	@echo -e "$(GREEN)‚úÖ Entorno configurado$(NC)"

install-deps: ## Instalar dependencias de testing
	@echo -e "$(BLUE)üì¶ Instalando dependencias...$(NC)"
	@go install -a std
	@echo -e "$(GREEN)‚úÖ Dependencias instaladas$(NC)"

# =============================================================================
# TESTING B√ÅSICO
# =============================================================================

test: setup ## Ejecutar todos los tests
	@echo -e "$(BLUE)üß™ Ejecutando tests...$(NC)"
	@go test -v $(PACKAGE)

test-short: setup ## Ejecutar solo tests r√°pidos
	@echo -e "$(BLUE)‚ö° Ejecutando tests r√°pidos...$(NC)"
	@go test -short -v $(PACKAGE)

test-verbose: setup ## Tests con output verbose
	@echo -e "$(BLUE)üìù Tests con output detallado...$(NC)"
	@go test -v -count=1 $(PACKAGE)

# =============================================================================
# CONCURRENCIA Y RACE CONDITIONS
# =============================================================================

test-race: setup ## Tests con race detection
	@echo -e "$(BLUE)üèÉ Detectando race conditions...$(NC)"
	@go test -race -v $(PACKAGE)

test-stress: setup ## Ejecutar tests de stress
	@echo -e "$(BLUE)üí™ Tests de stress...$(NC)"
	@go test -v -timeout=30s -run="Stress|Concurrent" $(PACKAGE)

# =============================================================================
# COVERAGE
# =============================================================================

coverage: setup ## Generar reporte de coverage
	@echo -e "$(BLUE)üìä Generando coverage...$(NC)"
	@go test -coverprofile=$(COVERAGE_OUT) -coverpkg=$(PACKAGE) $(PACKAGE)
	@go tool cover -html=$(COVERAGE_OUT) -o $(COVERAGE_HTML)
	@echo -e "$(GREEN)‚úÖ Coverage HTML: $(COVERAGE_HTML)$(NC)"

coverage-func: setup ## Mostrar coverage por funci√≥n
	@echo -e "$(BLUE)üìà Coverage por funci√≥n...$(NC)"
	@go test -coverprofile=$(COVERAGE_OUT) -coverpkg=$(PACKAGE) $(PACKAGE) > /dev/null
	@go tool cover -func=$(COVERAGE_OUT)

coverage-total: setup ## Mostrar solo coverage total
	@go test -coverprofile=$(COVERAGE_OUT) -coverpkg=$(PACKAGE) $(PACKAGE) > /dev/null 2>&1
	@go tool cover -func=$(COVERAGE_OUT) | grep total | awk '{print "Coverage: " $$3}'

test-cover: coverage ## Alias para coverage

# =============================================================================
# BENCHMARKS
# =============================================================================

bench: setup ## Ejecutar benchmarks
	@echo -e "$(BLUE)‚ö° Ejecutando benchmarks...$(NC)"
	@go test -bench=. -benchmem $(PACKAGE)

bench-cpu: setup ## Benchmarks con CPU profiling
	@echo -e "$(BLUE)üî• Benchmarks con CPU profiling...$(NC)"
	@mkdir -p reports
	@go test -bench=. -benchmem -cpuprofile=reports/cpu.prof $(PACKAGE)

bench-mem: setup ## Benchmarks con memory profiling
	@echo -e "$(BLUE)üß† Benchmarks con memory profiling...$(NC)"
	@mkdir -p reports
	@go test -bench=. -benchmem -memprofile=reports/mem.prof $(PACKAGE)

bench-compare: setup ## Comparar benchmarks (ejecutar dos veces)
	@echo -e "$(BLUE)üìä Benchmarks de comparaci√≥n...$(NC)"
	@mkdir -p reports
	@go test -bench=. -count=5 $(PACKAGE) > reports/bench_new.txt
	@echo -e "$(GREEN)‚úÖ Resultados en reports/bench_new.txt$(NC)"

# =============================================================================
# LINTING Y FORMATO
# =============================================================================

fmt: ## Formatear c√≥digo
	@echo -e "$(BLUE)üé® Formateando c√≥digo...$(NC)"
	@gofmt -w .
	@echo -e "$(GREEN)‚úÖ C√≥digo formateado$(NC)"

vet: ## Ejecutar go vet
	@echo -e "$(BLUE)üîç Ejecutando go vet...$(NC)"
	@go vet $(PACKAGE)
	@echo -e "$(GREEN)‚úÖ go vet completado$(NC)"

lint: fmt vet ## Formatear + vet

# =============================================================================
# FUZZING (Go 1.18+)
# =============================================================================

fuzz: setup ## Ejecutar fuzzing tests
	@echo -e "$(BLUE)üîÄ Ejecutando fuzzing...$(NC)"
	@timeout 30s go test -fuzz=. -fuzztime=30s $(PACKAGE) || true

# =============================================================================
# TARGETS COMBINADOS
# =============================================================================

full: lint test test-race coverage bench ## Suite completa de testing
	@echo -e "$(GREEN)üéâ Suite completa ejecutada$(NC)"

ci: setup test-short test-race coverage-total ## Tests para CI/CD
	@echo -e "$(GREEN)‚úÖ CI tests completados$(NC)"

dev: test-short coverage ## Tests r√°pidos para desarrollo
	@echo -e "$(GREEN)‚ö° Dev tests completados$(NC)"

# =============================================================================
# UTILIDADES
# =============================================================================

clean: ## Limpiar archivos generados
	@echo -e "$(BLUE)üßπ Limpiando archivos...$(NC)"
	@rm -rf reports/
	@go clean -testcache
	@echo -e "$(GREEN)‚úÖ Archivos limpiados$(NC)"

watch: ## Ejecutar tests cuando cambie el c√≥digo (requiere entr)
	@echo -e "$(BLUE)üëÄ Watching for changes...$(NC)"
	@find . -name "*.go" | entr -c make test-short

deps-check: ## Verificar dependencias
	@echo -e "$(BLUE)üîç Verificando dependencias...$(NC)"
	@go mod verify
	@go mod tidy
	@echo -e "$(GREEN)‚úÖ Dependencias verificadas$(NC)"

# =============================================================================
# TARGETS ESPEC√çFICOS POR EJERCICIO
# =============================================================================

test-book: setup ## Tests para BookValidator
	@go test -v -run TestBookValidator

test-inventory: setup ## Tests para InventoryService
	@go test -v -run TestInventoryService

test-cart: setup ## Tests para ShoppingCart
	@go test -v -run TestShoppingCart

test-payment: setup ## Tests para PaymentProcessor
	@go test -v -run TestPaymentProcessor

test-search: setup ## Tests para SearchEngine
	@go test -v -run TestSearchEngine

test-api: setup ## Tests para APIServer
	@go test -v -run TestAPIServer

test-calculator: setup ## Tests para Calculator
	@go test -v -run TestCalculator

test-worker: setup ## Tests para WorkerPool
	@go test -v -run TestWorkerPool

# =============================================================================
# BENCHMARKS ESPEC√çFICOS
# =============================================================================

bench-book: setup ## Benchmark BookValidator
	@go test -bench=BenchmarkBookValidator -benchmem

bench-inventory: setup ## Benchmark InventoryService
	@go test -bench=BenchmarkInventoryService -benchmem

bench-cart: setup ## Benchmark ShoppingCart
	@go test -bench=BenchmarkShoppingCart -benchmem

bench-search: setup ## Benchmark SearchEngine
	@go test -bench=BenchmarkSearchEngine -benchmem

# =============================================================================
# TARGETS DE EJEMPLO
# =============================================================================

example: ## Ejecutar ejemplos
	@echo -e "$(BLUE)üìñ Ejecutando ejemplos...$(NC)"
	@go test -v -run Example

demo: setup ## Demostraci√≥n de testing
	@echo -e "$(BLUE)üé¨ Demostraci√≥n de testing...$(NC)"
	@echo ""
	@echo "1. Tests b√°sicos:"
	@make test-short
	@echo ""
	@echo "2. Coverage:"
	@make coverage-total
	@echo ""
	@echo "3. Benchmarks r√°pidos:"
	@go test -bench=BenchmarkAdd -benchtime=1s
	@echo ""
	@echo -e "$(GREEN)‚úÖ Demostraci√≥n completada$(NC)"

# =============================================================================
# INFORMACI√ìN DEL SISTEMA
# =============================================================================

info: ## Informaci√≥n del entorno
	@echo -e "$(BLUE)‚ÑπÔ∏è  Informaci√≥n del entorno$(NC)"
	@echo "=========================="
	@echo "Go version: $(shell go version)"
	@echo "GOOS: $(shell go env GOOS)"
	@echo "GOARCH: $(shell go env GOARCH)"
	@echo "CGO_ENABLED: $(shell go env CGO_ENABLED)"
	@echo "Test cache: $(shell go env GOCACHE)"
	@echo ""
	@echo "M√≥dulos:"
	@go list -m all | head -5

# =============================================================================
# SCRIPTS PERSONALIZADOS
# =============================================================================

suite: ## Ejecutar suite completa con script
	@echo -e "$(BLUE)üöÄ Ejecutando suite completa...$(NC)"
	@./coverage.sh

# Target para mostrar estad√≠sticas
stats: setup ## Mostrar estad√≠sticas de tests
	@echo -e "$(BLUE)üìä Estad√≠sticas de tests$(NC)"
	@echo "========================"
	@echo "Archivos de test: $(shell find . -name "*_test.go" | wc -l)"
	@echo "Funciones de test: $(shell grep -r "^func Test" . | wc -l)"
	@echo "Benchmarks: $(shell grep -r "^func Benchmark" . | wc -l)"
	@echo "Examples: $(shell grep -r "^func Example" . | wc -l)"
